/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.philippefichet.sonarlint.netbeans;

import java.util.Collection;
import java.util.Optional;
import javax.swing.DefaultListModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.sonarsource.sonarlint.core.client.api.common.RuleDetails;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//fr.philippefichet.sonarlint.netbeans//SonarRuleDetails//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "SonarRuleDetailsTopComponent",
    iconBase = "fr/philippefichet/sonarlint/netbeans/resources/sonarlint.png",
    persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "fr.philippefichet.sonarlint.netbeans.SonarRuleDetailsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_SonarRuleDetailsAction",
    preferredID = "SonarRuleDetailsTopComponent"
)
@Messages({
    "CTL_SonarRuleDetailsAction=Sonar Rule Details",
    "CTL_SonarRuleDetailsTopComponent=Sonar Rule Details Window",
    "HINT_SonarRuleDetailsTopComponent=This is a Sonar Rule Details window"
})
public final class SonarRuleDetailsTopComponent extends TopComponent {

    public SonarRuleDetailsTopComponent() {
        initComponents();
        setName(Bundle.CTL_SonarRuleDetailsTopComponent());
        setToolTipText(Bundle.HINT_SonarRuleDetailsTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sonarRuleKeyFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        sonarLintRuleDetailsEditor = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        sonarLintAllRules = new javax.swing.JList<>();

        setLayout(new java.awt.BorderLayout());

        sonarRuleKeyFilter.setText(org.openide.util.NbBundle.getMessage(SonarRuleDetailsTopComponent.class, "SonarRuleDetailsTopComponent.sonarRuleKeyFilter.text")); // NOI18N
        sonarRuleKeyFilter.setToolTipText(org.openide.util.NbBundle.getMessage(SonarRuleDetailsTopComponent.class, "SonarRuleDetailsTopComponent.sonarRuleKeyFilter.toolTipText")); // NOI18N
        sonarRuleKeyFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sonarRuleKeyFilterKeyReleased(evt);
            }
        });
        add(sonarRuleKeyFilter, java.awt.BorderLayout.PAGE_START);

        sonarLintRuleDetailsEditor.setEditable(false);
        sonarLintRuleDetailsEditor.setContentType("text/html");
        jScrollPane1.setViewportView(sonarLintRuleDetailsEditor);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        initListAllRuleDetails();
        sonarLintAllRules.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sonarLintAllRulesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(sonarLintAllRules);

        add(jScrollPane2, java.awt.BorderLayout.LINE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void sonarRuleKeyFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sonarRuleKeyFilterKeyReleased
        ruleKeyFilter = sonarRuleKeyFilter.getText().toLowerCase();
        initListAllRuleDetails();
    }//GEN-LAST:event_sonarRuleKeyFilterKeyReleased

    private void sonarLintAllRulesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sonarLintAllRulesValueChanged
        String selectedValue = sonarLintAllRules.getSelectedValue();
        SonarLintEngine sonarLintEngine = Lookup.getDefault().lookup(SonarLintEngine.class);
        sonarLintEngine.whenInitialized((SonarLintEngine engine) -> {
            Optional<RuleDetails> optionalRuleDetails = engine.getRuleDetails(selectedValue);
            if (optionalRuleDetails.isPresent()) {
                RuleDetails ruleDetails = optionalRuleDetails.get();
                sonarLintRuleDetailsEditor.setText(ruleDetails.getHtmlDescription());
                sonarLintRuleDetailsEditor.getCaret().moveDot(0);
            }
        });
    }//GEN-LAST:event_sonarLintAllRulesValueChanged

    private void initListAllRuleDetails() {
        SonarLintEngine sonarLintEngine = Lookup.getDefault().lookup(SonarLintEngine.class);
        sonarLintEngine.whenInitialized((SonarLintEngine engine) -> {
            DefaultListModel<String> model = new DefaultListModel<>();
            Collection<RuleDetails> rules = engine.getAllRuleDetails();
            rules.stream().sorted((r1, r2) -> r1.getKey().compareTo(r2.getKey()))
            .filter(rule -> ruleKeyFilter.isEmpty() || rule.getKey().toLowerCase().contains(ruleKeyFilter))
            .forEach(rule -> model.addElement(rule.getKey()));
            sonarLintAllRules.setModel(model);
            sonarLintAllRules.updateUI();
        });
    }

    private String ruleKeyFilter = "";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> sonarLintAllRules;
    private javax.swing.JEditorPane sonarLintRuleDetailsEditor;
    private javax.swing.JTextField sonarRuleKeyFilter;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
