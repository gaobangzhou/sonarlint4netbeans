/*
 * sonarlint4netbeans: SonarLint integration for Apache Netbeans
 * Copyright (C) 2020 Philippe FICHET.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package com.github.philippefichet.sonarlint4netbeans.option;

import com.github.philippefichet.sonarlint4netbeans.SonarLintEngine;
import com.github.philippefichet.sonarlint4netbeans.tools.HttpURLConnectionUtil;
import com.google.gson.Gson;
import java.awt.event.ActionEvent;
import java.util.Map;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.sonarsource.sonarlint.core.client.api.common.Version;

/**
 *
 * @author FICHET Philippe &lt;philippe.fichet@laposte.net&gt;
 */
public class SonarQubeOptionsPanel extends javax.swing.JPanel {

    private String nodeJSPathToSave = null;
    private Version nodeJSVersionToSave = null;
    private Boolean applyDifferentRulesOnTestFiles = null;
    private SonarLintEngine engine;
    private SonarQubeOptionsListener listener;

    /**
     * Creates new form SonarLintOptionsPanelOptionsJPanel
     */
    public SonarQubeOptionsPanel(SonarLintEngine engine, SonarQubeOptionsListener listener) {
        this.engine = engine;
        this.listener = listener;
        initComponents();
        initComponentsBehaviors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sonarServerLabel = new javax.swing.JLabel();
        qualityProfileLabel = new javax.swing.JLabel();
        sonarServerField = new javax.swing.JTextField();
        getProfileRules = new javax.swing.JButton();
        qualityProfileField = new javax.swing.JTextField();
        sonarMsg = new javax.swing.JLabel();
        testServer = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(sonarServerLabel, org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.sonarServerLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(qualityProfileLabel, org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.qualityProfileLabel.text")); // NOI18N

        sonarServerField.setText(org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.sonarServerField.text")); // NOI18N

        getProfileRules.setLabel(org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.getProfileRules.label")); // NOI18N

        qualityProfileField.setText(org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.qualityProfileField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sonarMsg, org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.sonarMsg.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testServer, org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.testServer.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getProfileRules, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sonarMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(qualityProfileLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(qualityProfileField))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(sonarServerLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sonarServerField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(testServer)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sonarServerLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sonarServerField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(testServer)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qualityProfileLabel)
                    .addComponent(qualityProfileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(sonarMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getProfileRules))
        );

        sonarServerLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.sonarServerLabel.AccessibleContext.accessibleName")); // NOI18N
        qualityProfileLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.qualityProfileLabel.AccessibleContext.accessibleName")); // NOI18N
        getProfileRules.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(SonarQubeOptionsPanel.class, "SonarQubeOptionsPanel.getProfileRules.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getProfileRules;
    private javax.swing.JTextField qualityProfileField;
    private javax.swing.JLabel qualityProfileLabel;
    private javax.swing.JLabel sonarMsg;
    private javax.swing.JTextField sonarServerField;
    private javax.swing.JLabel sonarServerLabel;
    private javax.swing.JButton testServer;
    // End of variables declaration//GEN-END:variables

    private void initComponentsBehaviors() {
        engine.getSonarQubeServer().ifPresent((String server) -> {
            sonarServerField.setText(server);
        });
        engine.getQualityProfile().ifPresent((String profileName) -> {
            qualityProfileField.setText(profileName);
        });

        sonarServerField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                listener.sonarQubeOptionsChanged(sonarServerField.getText(), qualityProfileField.getText(), "");
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                listener.sonarQubeOptionsChanged(sonarServerField.getText(), qualityProfileField.getText(), "");
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                listener.sonarQubeOptionsChanged(sonarServerField.getText(), qualityProfileField.getText(), "");
            }
        });

        qualityProfileField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                listener.sonarQubeOptionsChanged(sonarServerField.getText(), qualityProfileField.getText(), "");
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                listener.sonarQubeOptionsChanged(sonarServerField.getText(), qualityProfileField.getText(), "");
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                listener.sonarQubeOptionsChanged(sonarServerField.getText(), qualityProfileField.getText(), "");
            }
        });

        testServer.addActionListener((ActionEvent e) -> {
            String sonarServer = sonarServerField.getText();
            if (sonarServer.isEmpty()) {
                sonarMsg.setText("SonarQube Server is Empty!");
                return;
            }
            Map<String, String> resultMap = HttpURLConnectionUtil.doGet(sonarServer + HttpURLConnectionUtil.SONAR_SERVER_VERSION);
            if (!Boolean.valueOf(resultMap.get(HttpURLConnectionUtil.HTTP_SUCCESS)) || resultMap.get(HttpURLConnectionUtil.HTTP_DATA).isEmpty()) {
                sonarMsg.setText("Can't connet the SonarQube Server !");
            } else {
                sonarMsg.setText("Conneted the SonarQube Server,the version is " + resultMap.get(HttpURLConnectionUtil.HTTP_DATA));
            }
        });
        Gson gson = new Gson();
        getProfileRules.addActionListener((ActionEvent e) -> {
            String sonarServer = sonarServerField.getText();
            if (sonarServer.isEmpty()) {
                sonarMsg.setText("SonarQube Server is Empty!");
                return;
            }
            String sonarProfile = qualityProfileField.getText();
            if (sonarProfile.isEmpty()) {
                sonarMsg.setText("Quality Profile is Empty!");
                return;
            }
            Map<String, String> resultMap = HttpURLConnectionUtil.doGet(sonarServer + HttpURLConnectionUtil.SONAR_PROFILE_URL.replace("{profileName}", sonarProfile));
            if (!Boolean.valueOf(resultMap.get(HttpURLConnectionUtil.HTTP_SUCCESS)) || resultMap.get(HttpURLConnectionUtil.HTTP_DATA).isEmpty()) {
                sonarMsg.setText("Quality Profile is not exsited !");
            } else {
                ProfileData profiles = gson.fromJson(resultMap.get(HttpURLConnectionUtil.HTTP_DATA), ProfileData.class);
                if (profiles == null || profiles.getProfiles() == null || profiles.getProfiles().isEmpty()) {
                    sonarMsg.setText("Quality Profile is not exsited !");
                    return;
                }
                String profileId = profiles.getProfiles().get(0).getKey();
                sonarMsg.setText("Starting loading the rules of " + sonarProfile);
                engine.setSonarQubeServer(sonarServer, sonarProfile, profileId);
                Map<String, String> result = HttpURLConnectionUtil.doGet(sonarServer
                        + HttpURLConnectionUtil.SONAR_RULES_SEARCH_URL.replace("{profileId}", profileId));
                if (Boolean.valueOf(result.get(HttpURLConnectionUtil.HTTP_SUCCESS)) && !result.get(HttpURLConnectionUtil.HTTP_DATA).isEmpty()) {
                    String rulesString = result.get(HttpURLConnectionUtil.HTTP_DATA);
                    SonarRulesPage rulesPage = gson.fromJson(rulesString, SonarRulesPage.class);
                    engine.addAllSonarQubeRule(rulesPage.getRules());
                    sonarMsg.setText("Loaded " + rulesPage.getRules().size()
                            + " rules from SoanrQube , excluded " + (engine.getAllRuleDetails().size() - rulesPage.getRules().size()) + " rules");
                }
            }
        });
    }
}
